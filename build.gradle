plugins {
	id 'java'
	id 'jacoco'
	id 'org.springframework.boot' version '3.4.3'
	id 'io.spring.dependency-management' version '1.1.7'
	id 'org.springdoc.openapi-gradle-plugin' version '1.9.0'
}

group = 'com.ih'
version = '0.0.1-SNAPSHOT'

java {
	toolchain {
		languageVersion = JavaLanguageVersion.of(17)
	}
}

configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
}

repositories {
	mavenCentral()
}

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	implementation 'org.springframework.boot:spring-boot-starter-oauth2-client'
	implementation 'org.springframework.boot:spring-boot-starter-web'
	implementation 'org.springframework.boot:spring-boot-starter-security'
	implementation 'org.springframework.security:spring-security-core:6.4.2'
	implementation 'org.springframework.security:spring-security-web:6.4.2'
	implementation 'org.springdoc:springdoc-openapi-starter-webmvc-ui:2.8.5'
	implementation 'io.github.resilience4j:resilience4j-spring-boot3:2.0.2'

	implementation 'io.jsonwebtoken:jjwt-api:0.12.6'
	implementation 'io.jsonwebtoken:jjwt-impl:0.12.6'

	implementation 'org.springframework.boot:spring-boot-starter-validation:3.4.3'
	implementation 'org.springframework.boot:spring-boot-starter-oauth2-client'
	implementation 'com.h2database:h2:2.2.220'

	implementation "me.paulschwarz:spring-dotenv:4.0.0"

	compileOnly 'org.projectlombok:lombok'
	runtimeOnly 'org.postgresql:postgresql'
	runtimeOnly 'io.jsonwebtoken:jjwt-jackson:0.12.6'

	developmentOnly 'org.springframework.boot:spring-boot-devtools'

	annotationProcessor 'org.projectlombok:lombok'

	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	testImplementation 'org.springframework.security:spring-security-test'
	testImplementation 'org.springframework:spring-test:6.2.3'

	testImplementation 'org.mockito:mockito-core:5.17.0'
	testImplementation 'org.mockito:mockito-junit-jupiter:5.17.0'

	testImplementation 'org.junit.jupiter:junit-jupiter-api'
	testImplementation 'org.junit.jupiter:junit-jupiter-engine'
	testImplementation 'org.junit.platform:junit-platform-commons'

	testImplementation platform('org.junit:junit-bom:5.12.2')

	testRuntimeOnly 'org.junit.platform:junit-platform-launcher:1.8.2'
}


tasks.register('installLocalGitHook', Copy) {
	from new File(rootProject.rootDir, 'hooks')
	into { new File(rootProject.rootDir, '.git/hooks') }
	fileMode 0775
}

tasks.named('build') {
	dependsOn(installLocalGitHook)
}

tasks.named('test') {
	useJUnitPlatform()
}

tasks.withType(Test).configureEach {
	finalizedBy jacocoTestReport
}

jacocoTestReport {
	dependsOn test
	reports {
		xml.required = true
		html.required = true
	}
	classDirectories.setFrom(
			files(classDirectories.files.collect {
				fileTree(dir: it, exclude: [
						'com/ih/itinerary_hub_service/config/GlobalRateLimiterAdvice.class',
						'com/ih/itinerary_hub_service/config/LocalSecurityConfig.class'
				])
			})
	)
}

bootJar {
	enabled = true
}

jar {
	enabled = false
}

openApi {
	apiDocsUrl = "http://localhost:8080/v3/api-docs"
	outputDir.set(file("$projectDir/docs/apis"))
	outputFileName = "itinerary-hub-service-spec.yaml"
	waitTimeInSeconds = 30
	customBootRun {
		args.set(["--spring.profiles.active=local"])
	}
}

task checkDocs() {
	dependsOn "generateOpenApiDocs"
	group "openapi"
	doLast {

		def output = "git diff docs/apis/itinerary-hub-service-spec.yaml".execute(
				[],
				projectDir
		).text.trim()

		if(output.length() > 0) {
			throw new GradleException("Docs need updating:\n$output\n")
		}
	}
}
